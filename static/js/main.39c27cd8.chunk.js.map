{"version":3,"sources":["ml/contact-nominee__en_windows_2021-07-07-utc_v1_9_0.ppn","Speech.js","landing.js","contact.js","Submit.js","App.js","reportWebVitals.js","serviceworker.js","index.js"],"names":["keywords","builtin","sensitivity","Dictaphone","props","useState","show","setShow","handleClose","contactperson","sessionStorage","getItem","medical","console","log","usePorcupine","PorcupineWorkerFactory","start","keywordLabel","isLoaded","isListening","isError","errorMessage","resume","pause","to","className","Jumbotron","Modal","onHide","Header","Title","Body","Footer","Button","variant","onClick","Landing","useRouteMatch","path","url","Container","fluid","Form","Group","controlId","Label","Control","type","placeholder","Check","label","id","Contact","clear","e","document","querySelector","value","contactdetails","preventDefault","setItem","Submit","history","useHistory","setTimeout","push","App","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.39c27cd8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/contact-nominee__en_windows_2021-07-07-utc_v1_9_0.5715e180.ppn\";","// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\n// voice ML stuff \r\nimport { PorcupineWorkerFactory } from '@picovoice/porcupine-web-en-worker';\r\nimport { usePorcupine } from '@picovoice/porcupine-web-react';\r\nimport './ml/contact-nominee__en_windows_2021-07-07-utc_v1_9_0.ppn';\r\n\r\n// some react and bootstrap libraries\r\nimport React, { useEffect,useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Container from 'react-bootstrap/Container';\r\nimport {IoIosArrowRoundBack} from 'react-icons/io';\r\n\r\n// modal styling \r\nimport Modal  from 'react-bootstrap/Modal';\r\nimport ModalHeader  from 'react-bootstrap/ModalHeader';\r\nimport  ModalBody  from 'react-bootstrap/ModalBody';\r\nimport  ModalFooter from 'react-bootstrap/ModalFooter';\r\nimport  Button from 'react-bootstrap/Button';\r\n\r\n\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nconst keywords = [{ builtin: 'Picovoice', sensitivity: 0.65 }];\r\n\r\n// const keywords = [{ custom: 'Picovoice', sensitivity: 0.65 }];\r\n\r\nfunction Dictaphone (props)  {\r\n\r\n     // Modal variables\r\n     const [show, setShow] = useState(false);\r\n     const handleClose = () => setShow(false);\r\n     const handleShow = () => {setShow(true)};\r\n\r\n     //storage variables \r\n     let contactperson = sessionStorage.getItem('contact');\r\n     let contactdetails = sessionStorage.getItem('details');\r\n     let medical = sessionStorage.getItem('medical');\r\n     \r\n    console.log (medical)\r\n\r\n    // function to check if key word has been said\r\n    const keywordEventHandler = keywordLabel => {\r\n      console.log(`Porcupine detected ${keywordLabel}`);\r\n      handleShow();\r\n    };\r\n\r\n    const {\r\n      isLoaded,\r\n      isListening,\r\n      isError,\r\n      errorMessage,\r\n      start,\r\n      resume,\r\n      pause,\r\n    } = usePorcupine(\r\n      PorcupineWorkerFactory,\r\n      { keywords: keywords, start: true },\r\n      keywordEventHandler\r\n    );\r\n\r\n\r\n\r\n    return (\r\n     \r\n          <div>\r\n\r\n            {/* back arrow icon  */}\r\n            <Link to=\"/contact\">\r\n            <li><IoIosArrowRoundBack className=\"back\"/></li>\r\n            </Link>\r\n\r\n          \r\n          <Jumbotron>\r\n            <h1>Voice Activated Family Notification</h1>\r\n          </Jumbotron>\r\n\r\n\r\n          <Modal show={show} onHide={handleClose}>\r\n\r\n          <Modal.Header>\r\n            <Modal.Title>Thank you</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body><p>`Your information about {medical} has been sent to  {contactperson}`</p></Modal.Body>\r\n          <Modal.Footer>\r\n\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n          </Modal>\r\n\r\n    \r\n          </div>\r\n    )\r\n  }\r\n\r\n  export default Dictaphone","import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './styles/landing.css';\r\n\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useRouteMatch,\r\n    useParams\r\n  } from \"react-router-dom\"\r\n\r\nfunction Landing () {\r\n\r\n    let { path, url } = useRouteMatch();\r\n\r\n    return (\r\n\r\n    <Container fluid>\r\n    <Jumbotron>\r\n        <h1>Voice Activated Family Notification</h1>\r\n    </Jumbotron>\r\n    <Container>    \r\n    <Form> \r\n    {/* form heading  */}\r\n   <ul><li><h2>Log in</h2></li><li>or sign up</li></ul>\r\n\r\n   \r\n    <Form.Group controlId=\"formBasicEmail\">\r\n        <Form.Label>Email address</Form.Label>\r\n        <Form.Control type=\"email\" placeholder=\"Enter email\"/>\r\n    </Form.Group>\r\n\r\n    <Form.Group controlId=\"formBasicPassword\">\r\n        <Form.Label>Password</Form.Label>\r\n        <Form.Control type=\"password\" placeholder=\"Password\"/>\r\n    </Form.Group>\r\n\r\n    {/* check boxes  */}\r\n    <Form.Group controlId=\"formBasicCheckbox\">\r\n        <Form.Check type=\"checkbox\" label=\"Show password\" />\r\n        <Form.Check type=\"checkbox\" label=\"Keep me logged in\" />\r\n    </Form.Group>\r\n\r\n{/* \r\n    add function to pass value to local storage....this will be used as token\r\n    for prototype to keep user logged in.....(add logout button on other pages)\r\n    that wil reset the local storage value to 0 (which will take back to landing page) */}\r\n\r\n \r\n    <Link to=\"/contact\"><Button variant=\"primary\" type=\"submit\" id = \"login\">\r\n        Log in\r\n    </Button>\r\n    </Link>\r\n\r\n  </Form>\r\n  </Container>\r\n  </Container>\r\n )\r\n}\r\n\r\n\r\nexport default Landing","import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport {IoIosArrowRoundBack} from 'react-icons/io'\r\n\r\n// mostly just a different margin on container\r\nimport './styles/contactForm.css';\r\n\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\n\r\n\r\nfunction Contact () {\r\n\r\n    sessionStorage.clear()\r\n\r\n    function store (e) {\r\n\r\n        let contactperson = document.querySelector('#formContactPerson').value\r\n        let contactdetails = document.querySelector('#formContactDetails').value\r\n        let medical = document.querySelector('#formMedicalConditions').value\r\n\r\n        if (contactperson == \"\" || contactdetails == \"\" || medical == \"\") {\r\n            e.preventDefault()\r\n        } else {\r\n            sessionStorage.setItem('contact',contactperson);\r\n            sessionStorage.setItem('details',contactdetails);\r\n            sessionStorage.setItem('medical',medical);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        // form heading \r\n        <Container id = \"contactForm\">\r\n            <Link to=\"/\">\r\n            <li><IoIosArrowRoundBack className=\"back\"/></li>\r\n            </Link>\r\n\r\n            <Form> \r\n                <Form.Group controlId=\"formContactPerson\">\r\n                    <strong><Form.Label>Contact Person</Form.Label></strong>\r\n                    <Form.Control type=\"text\" placeholder=\"Please enter name of contact person\"/>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formContactDetails\">\r\n                    <strong><Form.Label>Contact Details</Form.Label></strong>\r\n                    <Form.Control type=\"telephone\" placeholder=\"enter details of your nominated contact\"/>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formMedicalConditions\">\r\n                    <strong><Form.Label>Your Medical Conditions</Form.Label></strong>\r\n                    <Form.Control type=\"text\" placeholder=\"enter details of any medical conditions\"/>\r\n                </Form.Group>\r\n\r\n                <Link to=\"/submit\"><Button onClick={store} variant=\"primary\" type=\"submit\" id = \"login\">\r\n                    Submit\r\n                </Button>\r\n                </Link>\r\n            </Form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Contact","import React from 'react';\r\nimport Dictaphone from './Speech.js';\r\nimport Landing from './landing';\r\nimport Contact from './contact';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './styles/submit.css';\r\n\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    useHistory,\r\n    Route,\r\n    Link,\r\n  } from \"react-router-dom\"\r\n\r\nfunction Submit() {\r\n\r\n  let history = useHistory();\r\n  \r\n    // timer function to return to landing screen\r\n    setTimeout(gotoSpeech,6000)\r\n    function gotoSpeech () {\r\n      history.push(\"/speech\")\r\n    }\r\n \r\n\r\n  return (\r\n\r\n        <div className = \"updated\">\r\n            <div id=\"submit\"><h1>Contact Details Updated</h1>\r\n            <br></br>\r\n            <p>Your nominated contacts as well as your medical details have been updated. You don't need to do anything else. The phone will send the information when you use the activation phrase.</p>\r\n            \r\n            </div>\r\n        </div>\r\n  )\r\n}   \r\n \r\nexport default Submit;","import React from 'react';\r\n\r\nimport Dictaphone from './Speech.js';\r\nimport Submit from './Submit';\r\nimport Landing from './landing';\r\nimport Contact from './contact';\r\n\r\n\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\n\r\n \r\nfunction App() {\r\n  \r\n  return (\r\n\r\n    <div className=\"component\">\r\n        <Router>\r\n        <Switch>\r\n            <Route exact path=\"/\" component = {Landing} >\r\n            <Landing />\r\n\r\n            </Route>\r\n            <Route path=\"/contact\" component = {Contact}>\r\n            </Route>\r\n\r\n            <Route path=\"/submit\" component = {Submit}>\r\n            </Route>\r\n\r\n            <Route path=\"/speech\" component = {Dictaphone}>\r\n            <Dictaphone />\r\n            </Route>\r\n\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  )\r\n}\r\n \r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorker from './serviceworker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nserviceWorker.register();"],"sourceRoot":""}